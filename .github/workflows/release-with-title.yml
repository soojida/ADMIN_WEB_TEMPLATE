# release-please로 릴리즈 생성 → 후처리 스크립트로 PR 제목 반영
name: Release with PR Title

on:
  push:
    branches:
      - dev

jobs:
  release:
    runs-on: ubuntu-latest
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      tag_name: ${{ steps.release.outputs.tag_name }}
      pr: ${{ steps.release.outputs.pull_request }}
    steps:
      - id: release
        uses: google-github-actions/release-please-action@v4
        with:
          release-type: simple
          token: ${{ secrets.GITHUB_TOKEN }}

  update-release-title:
    needs: release
    if: needs.release.outputs.release_created == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Get PR title from merged PR
        uses: actions/github-script@v7
        with:
          script: |
            const tag = '${{ needs.release.outputs.tag_name }}';

            // 해당 태그의 릴리즈 정보 가져오기
            const releases = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo
            });

            const release = releases.data.find(r => r.tag_name === tag);
            if (!release) {
              core.setFailed(`Release with tag ${tag} not found.`);
              return;
            }

            // 최근 머지된 PR 정보 가져오기
            const pulls = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'closed',
              sort: 'updated',
              direction: 'desc',
              per_page: 10
            });

            const mergedPR = pulls.data.find(p => p.merged_at && p.base.ref === 'dev');
            const prTitle = mergedPR?.title ?? '자동 릴리즈';

            // 릴리즈 제목 업데이트
            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release.id,
              name: `Release ${tag} - ${prTitle}`
            });
